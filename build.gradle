import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'java'
    id 'com.github.gmazzo.buildconfig' version '3.0.3'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = "mc${minecraft_version}_v${mod_version}"
group = "mod.grimmauld.${modid}"
archivesBaseName = "${modid}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url 'https://jitpack.io/'
    }
    maven {
        url "https://maven.tterrag.com/"
    }
}

minecraft {
    mappings channel: 'official', version: '1.16.5'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "--debug", "--stacktrace", "--scan", "-mixin.config=${modid}.mixins.json".toString()
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            jvmArgs "-XX:+UnlockCommercialFeatures"

            mods {
                smartstrip {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "--debug", "--stacktrace", "--scan", "-mixin.config=${modid}.mixins.json".toString()
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                smartstrip {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation files("sidebaroverlay-mc1.16.5_v0.0.1-deobf.jar")

    implementation fg.deobf("com.jozufozu.flywheel:Flywheel:${flywheel_version}")
    implementation fg.deobf("com.simibubi.create:Create:${create_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
}


compileJava.options.encoding = 'UTF-8'

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${modid}",
                "Specification-Vendor"    : "Grimmauld",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Grimmauld",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${modid}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}


def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def hasUnstaged = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'status', '--porcelain'
        standardOutput = stdout
    }
    def result = stdout.toString().replaceAll("M gradlew", "").trim()
    if (!result.isEmpty())
        println("Found stageable results:\n${result}\n")
    return !result.isEmpty()
}

def hasCommandInstalled = { cmd ->
    if (!DefaultNativePlatform.currentOperatingSystem.isWindows())
        return true
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    return exec {
        ignoreExitValue = true
        standardOutput = stdout
        errorOutput = stderr
        commandLine "where", cmd
    }.getExitValue() == 0 && stdout.toString().trim().contains(cmd)
}

def getGitInfo = { ->
    if (!hasCommandInstalled("git")) {
        println("No git install found in PATH")
        return "NOGIT"
    }
    def stdout = new ByteArrayOutputStream()
    exec {
        standardOutput = stdout
        commandLine "git", "--version"
    }
    println(stdout.toString().trim())
    return "${getGitHash()}" + (hasUnstaged() ? "-modified" : "")
}

buildConfig {
    buildConfigField('String', 'MODID', "\"${modid}\"")
    buildConfigField('String', 'VERSION', "\"${project.version}\"")

    def gitstage = getGitInfo()
    println("Using git stage ${gitstage}")
    buildConfigField('String', 'GITHASH', "\"${gitstage}\"")


    version = project.version
    packageName = project.group
}
